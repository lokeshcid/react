{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lokesh joshi\\\\Downloads\\\\invictus-main\\\\invictus-main\\\\src\\\\fetch.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Fetch(props) {\n  _s();\n\n  const [text, setText] = useState('');\n  useEffect(() => {\n    axios.get('https://raw.githubusercontent.com/invictustech/test/main/README.md').then(res => {\n      setText(res.data);\n    }).catch(err => console.log('err', err));\n  }, []);\n\n  function wordFreq(string) {\n    var words1 = string.replace(/[.,-;]/g, '').toUpperCase().split(/\\s/);\n    var words = words1.filter(function (el) {\n      return el !== '';\n    });\n    var freqMap = {};\n    words.forEach(function (w) {\n      if (!freqMap[w]) {\n        freqMap[w] = 0;\n      }\n\n      freqMap[w] += 1;\n    });\n    return freqMap;\n  }\n\n  const array = [{}];\n  array.push(wordFreq(text));\n  const resultArray = [{}];\n\n  for (const item of Object.entries(array[1])) {\n    const newObj = {\n      word: '',\n      count: 0\n    };\n    newObj.word = item[0];\n    newObj.count = item[1];\n    resultArray.push(newObj);\n  }\n\n  function compare(a, b) {\n    if (a.count > b.count) {\n      return -1;\n    }\n\n    if (a.count < b.count) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  resultArray.sort(compare);\n  var r = [{}];\n  var num = parseInt(props.number) + 1;\n\n  if (num > resultArray.length) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Invalid value! Exceeded total number of words. Enter value \\u2264  \", resultArray.length - 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this);\n  } else if (num <= 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Invalid value! N cannot be negative\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this);\n  } else if (num === 1) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  } else if (Number.isNaN(num)) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Enter any number, input field cannot be empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n  r = resultArray.slice(1, num);\n\n  const TableList = ({\n    word,\n    count\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 6\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          id: \"header\",\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Word\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Count\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), r.map((item, index) => /*#__PURE__*/_jsxDEV(TableList, {\n          word: item.word,\n          count: item.count\n        }, index.toString(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Fetch, \"vvuvXdpjunZMIP3GGFDxY+qmJec=\");\n\n_c = Fetch;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetch\");","map":{"version":3,"sources":["C:/Users/Lokesh joshi/Downloads/invictus-main/invictus-main/src/fetch.js"],"names":["useState","useEffect","axios","Fetch","props","text","setText","get","then","res","data","catch","err","console","log","wordFreq","string","words1","replace","toUpperCase","split","words","filter","el","freqMap","forEach","w","array","push","resultArray","item","Object","entries","newObj","word","count","compare","a","b","sort","r","num","parseInt","number","length","Number","isNaN","slice","TableList","map","index","toString"],"mappings":"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","sourcesContent":["import {useState , useEffect} from 'react'\nimport axios from 'axios'\nexport default function Fetch(props) {\n  const [text , setText] = useState('')\n  useEffect(() => {\n    axios.get('https://raw.githubusercontent.com/invictustech/test/main/README.md')\n    .then(res => {\n      setText(res.data)\n    }).catch(err => console.log('err' ,err))\n  }, [])\n\n  function wordFreq(string) {\n    var words1 = string.replace(/[.,-;]/g, '').toUpperCase().split(/\\s/);\n    var words = words1.filter(function (el) {\n        return el !== '';\n      });\n    var freqMap = {};\n    words.forEach(function(w) {\n        if (!freqMap[w]) {\n            freqMap[w] = 0;\n        }\n        freqMap[w] += 1;\n    });\n\n    return freqMap;\n}\n\n\n\nconst array = [{}]\narray.push(wordFreq(text));\n\n\n\nconst resultArray = [{}]\n\nfor(const item of Object.entries(array[1])) {\n\n  const newObj = {\n    word:'',\n    count:0\n  }\n  newObj.word = item[0]\n  newObj.count = item[1];\n  resultArray.push(newObj);\n}\nfunction compare( a, b ) {\n    if ( a.count > b.count ){\n      return -1;\n    }\n    if ( a.count < b.count ){\n      return 1;\n    }\n    return 0;\n}\n  \nresultArray.sort( compare );\nvar r = [{}]\nvar num = parseInt(props.number) + 1\nif(num>resultArray.length){\n    return(\n        <p>Invalid value! Exceeded total number of words. Enter value â‰¤  {resultArray.length - 1}</p>\n    )\n}\nelse if(num<=0){\n    return(\n        <p>Invalid value! N cannot be negative</p>\n    )\n}\nelse if(num===1){\n    return(\n      <p> </p>\n    )\n}\nelse if(Number.isNaN(num)){\n  return(\n      <p>Enter any number, input field cannot be empty.</p>\n  )\n}\nr = resultArray.slice(1,num);\nconst TableList = ({word , count}) => {\n   return (\n     <tr>\n       <td>{word}</td>\n       <td>{count}</td>\n      </tr>\n   )\n} \n\n\n  return (\n    <div className=\"App\">\n      <table>\n        <tbody>\n        <tr id=\"header\">\n        <th>Word</th>\n        <th>Count</th>\n      </tr>\n      {r.map((item , index) => (<TableList word={item.word} key={index.toString()} count={item.count} />))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}